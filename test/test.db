-- 테이블 순서는 관계를 고려하여 한 번에 실행해도 에러가 발생하지 않게 정렬되었습니다.

-- tb_user Table Create SQL
-- 테이블 생성 SQL - tb_user
CREATE TABLE tb_user
(
    user_id      VARCHAR(50)     NOT NULL, 
    password     VARCHAR(255)    NOT NULL, 
    name         VARCHAR(50)     NOT NULL, 
    email        VARCHAR(50)     NOT NULL, 
    phone        VARCHAR(50)     NOT NULL, 
    user_type    VARCHAR(50)     NOT NULL, 
    joined_at    TIMESTAMP       NOT NULL, 
     PRIMARY KEY (user_id)
);

-- 테이블 Comment 설정 SQL - tb_user
COMMENT ON TABLE tb_user IS '회원';

-- 컬럼 Comment 설정 SQL - tb_user.user_id
COMMENT ON COLUMN tb_user.user_id IS '회원 아이디';

-- 컬럼 Comment 설정 SQL - tb_user.password
COMMENT ON COLUMN tb_user.password IS '비밀번호';

-- 컬럼 Comment 설정 SQL - tb_user.name
COMMENT ON COLUMN tb_user.name IS '이름';

-- 컬럼 Comment 설정 SQL - tb_user.email
COMMENT ON COLUMN tb_user.email IS '이메일';

-- 컬럼 Comment 설정 SQL - tb_user.phone
COMMENT ON COLUMN tb_user.phone IS '전화번호';

-- 컬럼 Comment 설정 SQL - tb_user.user_type
COMMENT ON COLUMN tb_user.user_type IS '사용자 유형';

-- 컬럼 Comment 설정 SQL - tb_user.joined_at
COMMENT ON COLUMN tb_user.joined_at IS '가입일자';


-- tb_document Table Create SQL
-- 테이블 생성 SQL - tb_document
CREATE TABLE tb_document
(
    doc_id         INT              GENERATED BY DEFAULT AS IDENTITY NOT NULL, 
    user_id        VARCHAR(50)      NOT NULL, 
    doc_path       VARCHAR(1000)    NOT NULL, 
    doc_type       VARCHAR(50)      NOT NULL, 
    uploaded_at    TIMESTAMP        NOT NULL, 
     PRIMARY KEY (doc_id)
);

-- 테이블 Comment 설정 SQL - tb_document
COMMENT ON TABLE tb_document IS '사용자 계약 문서';

-- 컬럼 Comment 설정 SQL - tb_document.doc_id
COMMENT ON COLUMN tb_document.doc_id IS '문서 아이디';

-- 컬럼 Comment 설정 SQL - tb_document.user_id
COMMENT ON COLUMN tb_document.user_id IS '유저 아이디';

-- 컬럼 Comment 설정 SQL - tb_document.doc_path
COMMENT ON COLUMN tb_document.doc_path IS '파일 경로';

-- 컬럼 Comment 설정 SQL - tb_document.doc_type
COMMENT ON COLUMN tb_document.doc_type IS '파일 종류';

-- 컬럼 Comment 설정 SQL - tb_document.uploaded_at
COMMENT ON COLUMN tb_document.uploaded_at IS '업로드 일시';

-- Foreign Key 설정 SQL - tb_document(user_id) -> tb_user(user_id)
ALTER TABLE tb_document
    ADD CONSTRAINT FK_tb_document_user_id_tb_user_user_id FOREIGN KEY (user_id)
        REFERENCES tb_user (user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Foreign Key 삭제 SQL - tb_document(user_id)
-- ALTER TABLE tb_document
-- DROP CONSTRAINT FK_tb_document_user_id_tb_user_user_id;


-- tb_landlord Table Create SQL
-- 테이블 생성 SQL - tb_landlord
CREATE TABLE tb_landlord
(
    landload_id          INT               GENERATED BY DEFAULT AS IDENTITY NOT NULL, 
    doc_id               INT               NOT NULL, 
    name                 VARCHAR(50)       NOT NULL, 
    property_id          INT               NOT NULL, 
    has_mortgage         CHAR(1)           NOT NULL, 
    mortgage_ratio       DECIMAL(12, 1)    NOT NULL, 
    ownership_changes    INT               NOT NULL, 
    is_delinquent        char(1)           NOT NULL, 
    is_real_owner        char(1)           NOT NULL, 
    has_disputes         CHAR(1)           NOT NULL, 
     PRIMARY KEY (landload_id)
);

-- 테이블 Comment 설정 SQL - tb_landlord
COMMENT ON TABLE tb_landlord IS '임대인';

-- 컬럼 Comment 설정 SQL - tb_landlord.landload_id
COMMENT ON COLUMN tb_landlord.landload_id IS '임대인 고유아이디';

-- 컬럼 Comment 설정 SQL - tb_landlord.doc_id
COMMENT ON COLUMN tb_landlord.doc_id IS '문서 아이디';

-- 컬럼 Comment 설정 SQL - tb_landlord.name
COMMENT ON COLUMN tb_landlord.name IS '이름';

-- 컬럼 Comment 설정 SQL - tb_landlord.property_id
COMMENT ON COLUMN tb_landlord.property_id IS '관련 매물 ID';

-- 컬럼 Comment 설정 SQL - tb_landlord.has_mortgage
COMMENT ON COLUMN tb_landlord.has_mortgage IS '근저당 설정여부';

-- 컬럼 Comment 설정 SQL - tb_landlord.mortgage_ratio
COMMENT ON COLUMN tb_landlord.mortgage_ratio IS '근저당 비율';

-- 컬럼 Comment 설정 SQL - tb_landlord.ownership_changes
COMMENT ON COLUMN tb_landlord.ownership_changes IS '소유권 변동횟수';

-- 컬럼 Comment 설정 SQL - tb_landlord.is_delinquent
COMMENT ON COLUMN tb_landlord.is_delinquent IS '채무불이행 여부';

-- 컬럼 Comment 설정 SQL - tb_landlord.is_real_owner
COMMENT ON COLUMN tb_landlord.is_real_owner IS '실소유자 여부';

-- 컬럼 Comment 설정 SQL - tb_landlord.has_disputes
COMMENT ON COLUMN tb_landlord.has_disputes IS '분쟁이력 여부';

-- Foreign Key 설정 SQL - tb_landlord(doc_id) -> tb_document(doc_id)
ALTER TABLE tb_landlord
    ADD CONSTRAINT FK_tb_landlord_doc_id_tb_document_doc_id FOREIGN KEY (doc_id)
        REFERENCES tb_document (doc_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Foreign Key 삭제 SQL - tb_landlord(doc_id)
-- ALTER TABLE tb_landlord
-- DROP CONSTRAINT FK_tb_landlord_doc_id_tb_document_doc_id;


-- tb_property Table Create SQL
-- 테이블 생성 SQL - tb_property
CREATE TABLE tb_property
(
    property_id               INT             NOT NULL, 
    jeonse_price              INT             NOT NULL, 
    address                   VARCHAR(600)    NOT NULL, 
    status                    VARCHAR(50)     NOT NULL, 
    estimated_jeonse_price    INT             NOT NULL, 
    risk_level                INT             NOT NULL, 
    created_at                TIMESTAMP       NOT NULL, 
     PRIMARY KEY (property_id)
);

-- 테이블 Comment 설정 SQL - tb_property
COMMENT ON TABLE tb_property IS '매물';

-- 컬럼 Comment 설정 SQL - tb_property.property_id
COMMENT ON COLUMN tb_property.property_id IS '매물 아이디';

-- 컬럼 Comment 설정 SQL - tb_property.jeonse_price
COMMENT ON COLUMN tb_property.jeonse_price IS '전세가';

-- 컬럼 Comment 설정 SQL - tb_property.address
COMMENT ON COLUMN tb_property.address IS '주소';

-- 컬럼 Comment 설정 SQL - tb_property.status
COMMENT ON COLUMN tb_property.status IS '매물거래상태';

-- 컬럼 Comment 설정 SQL - tb_property.estimated_jeonse_price
COMMENT ON COLUMN tb_property.estimated_jeonse_price IS '추정전세가';

-- 컬럼 Comment 설정 SQL - tb_property.risk_level
COMMENT ON COLUMN tb_property.risk_level IS '위험도';

-- 컬럼 Comment 설정 SQL - tb_property.created_at
COMMENT ON COLUMN tb_property.created_at IS '등록 일자';


-- tb_property_detail Table Create SQL
-- 테이블 생성 SQL - tb_property_detail
CREATE TABLE tb_property_detail
(
    property_id          INT              NOT NULL, 
    maintenance_fee      INT              NOT NULL, 
    options              TEXT             NOT NULL, 
    flor_score           INT              NOT NULL, 
    area                 DECIMAL(5, 1)    NOT NULL, 
    num_rooms            INT              NOT NULL, 
    num_bathrooms        INT              NOT NULL, 
    has_elevator         CHAR(1)          NOT NULL, 
    direction            VARCHAR(30)      NOT NULL, 
    parking_available    CHAR(1)          NOT NULL, 
    short_term_rent      CHAR(1)          NOT NULL, 
    building_usage       VARCHAR(100)     NOT NULL, 
    photo1               VARCHAR(1000)    NULL, 
    photo2               VARCHAR(1000)    NULL, 
    photo3               VARCHAR(1000)    NULL, 
     PRIMARY KEY (property_id)
);

-- 테이블 Comment 설정 SQL - tb_property_detail
COMMENT ON TABLE tb_property_detail IS '매물상세';

-- 컬럼 Comment 설정 SQL - tb_property_detail.property_id
COMMENT ON COLUMN tb_property_detail.property_id IS '매물 아이디';

-- 컬럼 Comment 설정 SQL - tb_property_detail.maintenance_fee
COMMENT ON COLUMN tb_property_detail.maintenance_fee IS '관리비';

-- 컬럼 Comment 설정 SQL - tb_property_detail.options
COMMENT ON COLUMN tb_property_detail.options IS '옵션';

-- 컬럼 Comment 설정 SQL - tb_property_detail.flor_score
COMMENT ON COLUMN tb_property_detail.flor_score IS '층점수';

-- 컬럼 Comment 설정 SQL - tb_property_detail.area
COMMENT ON COLUMN tb_property_detail.area IS '전용면적';

-- 컬럼 Comment 설정 SQL - tb_property_detail.num_rooms
COMMENT ON COLUMN tb_property_detail.num_rooms IS '방수';

-- 컬럼 Comment 설정 SQL - tb_property_detail.num_bathrooms
COMMENT ON COLUMN tb_property_detail.num_bathrooms IS '욕실수';

-- 컬럼 Comment 설정 SQL - tb_property_detail.has_elevator
COMMENT ON COLUMN tb_property_detail.has_elevator IS '엘리베이터';

-- 컬럼 Comment 설정 SQL - tb_property_detail.direction
COMMENT ON COLUMN tb_property_detail.direction IS '방향';

-- 컬럼 Comment 설정 SQL - tb_property_detail.parking_available
COMMENT ON COLUMN tb_property_detail.parking_available IS '주차가능';

-- 컬럼 Comment 설정 SQL - tb_property_detail.short_term_rent
COMMENT ON COLUMN tb_property_detail.short_term_rent IS '단기임대';

-- 컬럼 Comment 설정 SQL - tb_property_detail.building_usage
COMMENT ON COLUMN tb_property_detail.building_usage IS '건축물용도';

-- 컬럼 Comment 설정 SQL - tb_property_detail.photo1
COMMENT ON COLUMN tb_property_detail.photo1 IS '사진1';

-- 컬럼 Comment 설정 SQL - tb_property_detail.photo2
COMMENT ON COLUMN tb_property_detail.photo2 IS '사진2';

-- 컬럼 Comment 설정 SQL - tb_property_detail.photo3
COMMENT ON COLUMN tb_property_detail.photo3 IS '사진3';

-- Foreign Key 설정 SQL - tb_property_detail(property_id) -> tb_property(property_id)
ALTER TABLE tb_property_detail
    ADD CONSTRAINT FK_tb_property_detail_property_id_tb_property_property_id FOREIGN KEY (property_id)
        REFERENCES tb_property (property_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Foreign Key 삭제 SQL - tb_property_detail(property_id)
-- ALTER TABLE tb_property_detail
-- DROP CONSTRAINT FK_tb_property_detail_property_id_tb_property_property_id;


-- tb_trust Table Create SQL
-- 테이블 생성 SQL - tb_trust
CREATE TABLE tb_trust
(
    trust_id               INT          GENERATED BY DEFAULT AS IDENTITY NOT NULL, 
    landload_id            INT          NOT NULL, 
    analysis_date          TIMESTAMP    NOT NULL, 
    document_verified      CHAR(1)      NOT NULL, 
    insurance_available    CHAR(1)      NOT NULL, 
    trust_score            INT          NOT NULL, 
     PRIMARY KEY (trust_id)
);

-- 테이블 Comment 설정 SQL - tb_trust
COMMENT ON TABLE tb_trust IS '임대인 신뢰도';

-- 컬럼 Comment 설정 SQL - tb_trust.trust_id
COMMENT ON COLUMN tb_trust.trust_id IS '신뢰도 아이디';

-- 컬럼 Comment 설정 SQL - tb_trust.landload_id
COMMENT ON COLUMN tb_trust.landload_id IS '임대인 고유아이디';

-- 컬럼 Comment 설정 SQL - tb_trust.analysis_date
COMMENT ON COLUMN tb_trust.analysis_date IS '분석 일자';

-- 컬럼 Comment 설정 SQL - tb_trust.document_verified
COMMENT ON COLUMN tb_trust.document_verified IS '서류진위확인 여부';

-- 컬럼 Comment 설정 SQL - tb_trust.insurance_available
COMMENT ON COLUMN tb_trust.insurance_available IS '보증보험가입 여주';

-- 컬럼 Comment 설정 SQL - tb_trust.trust_score
COMMENT ON COLUMN tb_trust.trust_score IS '신뢰 점수';

-- Foreign Key 설정 SQL - tb_trust(landload_id) -> tb_landlord(landload_id)
ALTER TABLE tb_trust
    ADD CONSTRAINT FK_tb_trust_landload_id_tb_landlord_landload_id FOREIGN KEY (landload_id)
        REFERENCES tb_landlord (landload_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Foreign Key 삭제 SQL - tb_trust(landload_id)
-- ALTER TABLE tb_trust
-- DROP CONSTRAINT FK_tb_trust_landload_id_tb_landlord_landload_id;


-- tb_simulation Table Create SQL
-- 테이블 생성 SQL - tb_simulation
CREATE TABLE tb_simulation
(
    simulation_id     INT             GENERATED BY DEFAULT AS IDENTITY NOT NULL, 
    user_id           VARCHAR(50)     NOT NULL, 
    sinario_type      VARCHAR(50)     NOT NULL, 
    question          VARCHAR(500)    NOT NULL, 
    user_response     TEXT            NOT NULL, 
    fraud_type        VARCHAR(30)     NOT NULL, 
    risk_level        INT             NOT NULL, 
    session_status    VARCHAR(50)     NOT NULL, 
    created_at        TIMESTAMP       NOT NULL, 
     PRIMARY KEY (simulation_id)
);

-- 테이블 Comment 설정 SQL - tb_simulation
COMMENT ON TABLE tb_simulation IS '시뮬레이션';

-- 컬럼 Comment 설정 SQL - tb_simulation.simulation_id
COMMENT ON COLUMN tb_simulation.simulation_id IS '시뮬레이션 아이디';

-- 컬럼 Comment 설정 SQL - tb_simulation.user_id
COMMENT ON COLUMN tb_simulation.user_id IS '사용자 아이디';

-- 컬럼 Comment 설정 SQL - tb_simulation.sinario_type
COMMENT ON COLUMN tb_simulation.sinario_type IS '시나리오 유형';

-- 컬럼 Comment 설정 SQL - tb_simulation.question
COMMENT ON COLUMN tb_simulation.question IS '질문 내용';

-- 컬럼 Comment 설정 SQL - tb_simulation.user_response
COMMENT ON COLUMN tb_simulation.user_response IS '사용자 응답';

-- 컬럼 Comment 설정 SQL - tb_simulation.fraud_type
COMMENT ON COLUMN tb_simulation.fraud_type IS '유형 분류';

-- 컬럼 Comment 설정 SQL - tb_simulation.risk_level
COMMENT ON COLUMN tb_simulation.risk_level IS '위험도';

-- 컬럼 Comment 설정 SQL - tb_simulation.session_status
COMMENT ON COLUMN tb_simulation.session_status IS '세션상태';

-- 컬럼 Comment 설정 SQL - tb_simulation.created_at
COMMENT ON COLUMN tb_simulation.created_at IS '등록일';

-- Foreign Key 설정 SQL - tb_simulation(user_id) -> tb_user(user_id)
ALTER TABLE tb_simulation
    ADD CONSTRAINT FK_tb_simulation_user_id_tb_user_user_id FOREIGN KEY (user_id)
        REFERENCES tb_user (user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Foreign Key 삭제 SQL - tb_simulation(user_id)
-- ALTER TABLE tb_simulation
-- DROP CONSTRAINT FK_tb_simulation_user_id_tb_user_user_id;


-- tb_favorite Table Create SQL
-- 테이블 생성 SQL - tb_favorite
CREATE TABLE tb_favorite
(
    fav_id         INT            GENERATED BY DEFAULT AS IDENTITY NOT NULL, 
    user_id        VARCHAR(50)    NOT NULL, 
    property_id    INT            NOT NULL, 
    created_at     TIMESTAMP      NOT NULL, 
     PRIMARY KEY (fav_id)
);

-- 테이블 Comment 설정 SQL - tb_favorite
COMMENT ON TABLE tb_favorite IS '즐겨찾기';

-- 컬럼 Comment 설정 SQL - tb_favorite.fav_id
COMMENT ON COLUMN tb_favorite.fav_id IS '즐찾 아이디';

-- 컬럼 Comment 설정 SQL - tb_favorite.user_id
COMMENT ON COLUMN tb_favorite.user_id IS '회원 아이디';

-- 컬럼 Comment 설정 SQL - tb_favorite.property_id
COMMENT ON COLUMN tb_favorite.property_id IS '매물 아이디';

-- 컬럼 Comment 설정 SQL - tb_favorite.created_at
COMMENT ON COLUMN tb_favorite.created_at IS '등록 일자';

-- Foreign Key 설정 SQL - tb_favorite(user_id) -> tb_user(user_id)
ALTER TABLE tb_favorite
    ADD CONSTRAINT FK_tb_favorite_user_id_tb_user_user_id FOREIGN KEY (user_id)
        REFERENCES tb_user (user_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Foreign Key 삭제 SQL - tb_favorite(user_id)
-- ALTER TABLE tb_favorite
-- DROP CONSTRAINT FK_tb_favorite_user_id_tb_user_user_id;

-- Foreign Key 설정 SQL - tb_favorite(property_id) -> tb_property(property_id)
ALTER TABLE tb_favorite
    ADD CONSTRAINT FK_tb_favorite_property_id_tb_property_property_id FOREIGN KEY (property_id)
        REFERENCES tb_property (property_id) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Foreign Key 삭제 SQL - tb_favorite(property_id)
-- ALTER TABLE tb_favorite
-- DROP CONSTRAINT FK_tb_favorite_property_id_tb_property_property_id;


